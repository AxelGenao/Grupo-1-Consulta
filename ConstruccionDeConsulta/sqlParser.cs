//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\axelg\QueryDesign\sql.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class sqlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LCURLY=1, RCURLY=2, QUOTE=3, BRACKET_AB=4, BRACKET_CE=5, SEP=6, PAREN_AB=7, 
		PAREN_CE=8, COMI=9, DOT=10, TEXT=11, IG=12, SUM=13, LT=14, GT=15, AND=16, 
		Asterisco=17, Punto_Coma=18, WS=19;
	public const int
		RULE_sql = 0, RULE_tabla = 1, RULE_innerkw = 2, RULE_leftkw = 3, RULE_rightkw = 4, 
		RULE_columna = 5, RULE_campo = 6, RULE_columna_p = 7;
	public static readonly string[] ruleNames = {
		"sql", "tabla", "innerkw", "leftkw", "rightkw", "columna", "campo", "columna_p"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'''", "'['", "']'", "','", "'('", "')'", "'\"'", 
		"'.'", null, "'='", "'+'", "'<'", "'>'", "'&'", "'*'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LCURLY", "RCURLY", "QUOTE", "BRACKET_AB", "BRACKET_CE", "SEP", 
		"PAREN_AB", "PAREN_CE", "COMI", "DOT", "TEXT", "IG", "SUM", "LT", "GT", 
		"AND", "Asterisco", "Punto_Coma", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "sql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static sqlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public sqlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public sqlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SqlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TablaContext[] tabla() {
			return GetRuleContexts<TablaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablaContext tabla(int i) {
			return GetRuleContext<TablaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InnerkwContext innerkw() {
			return GetRuleContext<InnerkwContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LeftkwContext leftkw() {
			return GetRuleContext<LeftkwContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RightkwContext rightkw() {
			return GetRuleContext<RightkwContext>(0);
		}
		public SqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SqlContext sql() {
		SqlContext _localctx = new SqlContext(Context, State);
		EnterRule(_localctx, 0, RULE_sql);
		try {
			State = 23;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 16;
				tabla();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 17;
				tabla();
				State = 18;
				tabla();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 20;
				innerkw();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 21;
				leftkw();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 22;
				rightkw();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnaContext columna() {
			return GetRuleContext<ColumnaContext>(0);
		}
		public TablaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tabla; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTabla(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TablaContext tabla() {
		TablaContext _localctx = new TablaContext(Context, State);
		EnterRule(_localctx, 2, RULE_tabla);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			columna();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InnerkwContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Columna_pContext columna_p() {
			return GetRuleContext<Columna_pContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(sqlParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEP() { return GetTokens(sqlParser.SEP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP(int i) {
			return GetToken(sqlParser.SEP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LCURLY() { return GetTokens(sqlParser.LCURLY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY(int i) {
			return GetToken(sqlParser.LCURLY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnaContext[] columna() {
			return GetRuleContexts<ColumnaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnaContext columna(int i) {
			return GetRuleContext<ColumnaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RCURLY() { return GetTokens(sqlParser.RCURLY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY(int i) {
			return GetToken(sqlParser.RCURLY, i);
		}
		public InnerkwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_innerkw; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInnerkw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InnerkwContext innerkw() {
		InnerkwContext _localctx = new InnerkwContext(Context, State);
		EnterRule(_localctx, 4, RULE_innerkw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			columna_p();
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEP) {
				{
				State = 28;
				Match(SEP);
				State = 29;
				Match(LCURLY);
				State = 30;
				columna();
				State = 31;
				Match(RCURLY);
				}
			}

			State = 35;
			Match(AND);
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEP) {
				{
				State = 36;
				Match(SEP);
				State = 37;
				Match(LCURLY);
				State = 38;
				columna();
				State = 39;
				Match(RCURLY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftkwContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CampoContext[] campo() {
			return GetRuleContexts<CampoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CampoContext campo(int i) {
			return GetRuleContext<CampoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(sqlParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LCURLY() { return GetTokens(sqlParser.LCURLY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY(int i) {
			return GetToken(sqlParser.LCURLY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RCURLY() { return GetTokens(sqlParser.RCURLY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY(int i) {
			return GetToken(sqlParser.RCURLY, i);
		}
		public LeftkwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftkw; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeftkw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeftkwContext leftkw() {
		LeftkwContext _localctx = new LeftkwContext(Context, State);
		EnterRule(_localctx, 6, RULE_leftkw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			campo();
			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LCURLY) {
				{
				State = 44;
				Match(LCURLY);
				State = 45;
				campo();
				State = 46;
				Match(RCURLY);
				}
			}

			State = 50;
			Match(LT);
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LCURLY) {
				{
				State = 51;
				Match(LCURLY);
				State = 52;
				campo();
				State = 53;
				Match(RCURLY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightkwContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CampoContext[] campo() {
			return GetRuleContexts<CampoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CampoContext campo(int i) {
			return GetRuleContext<CampoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(sqlParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LCURLY() { return GetTokens(sqlParser.LCURLY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY(int i) {
			return GetToken(sqlParser.LCURLY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RCURLY() { return GetTokens(sqlParser.RCURLY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY(int i) {
			return GetToken(sqlParser.RCURLY, i);
		}
		public RightkwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightkw; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightkw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RightkwContext rightkw() {
		RightkwContext _localctx = new RightkwContext(Context, State);
		EnterRule(_localctx, 8, RULE_rightkw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			campo();
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LCURLY) {
				{
				State = 58;
				Match(LCURLY);
				State = 59;
				campo();
				State = 60;
				Match(RCURLY);
				}
			}

			State = 64;
			Match(GT);
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LCURLY) {
				{
				State = 65;
				Match(LCURLY);
				State = 66;
				campo();
				State = 67;
				Match(RCURLY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnaContext : ParserRuleContext {
        internal object columna;

        [System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(sqlParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BRACKET_AB() { return GetTokens(sqlParser.BRACKET_AB); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRACKET_AB(int i) {
			return GetToken(sqlParser.BRACKET_AB, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CampoContext[] campo() {
			return GetRuleContexts<CampoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CampoContext campo(int i) {
			return GetRuleContext<CampoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BRACKET_CE() { return GetTokens(sqlParser.BRACKET_CE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRACKET_CE(int i) {
			return GetToken(sqlParser.BRACKET_CE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEP() { return GetTokens(sqlParser.SEP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP(int i) {
			return GetToken(sqlParser.SEP, i);
		}
		public ColumnaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columna; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumna(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnaContext columna() {
		ColumnaContext _localctx = new ColumnaContext(Context, State);
		EnterRule(_localctx, 10, RULE_columna);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(TEXT);
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BRACKET_AB) {
				{
				State = 72;
				Match(BRACKET_AB);
				State = 73;
				campo();
				State = 74;
				Match(BRACKET_CE);
				}
			}

			State = 83;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 78;
				Match(SEP);
				State = 79;
				Match(BRACKET_AB);
				State = 80;
				campo();
				State = 81;
				Match(BRACKET_CE);
				}
				break;
			}
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEP) {
				{
				State = 85;
				Match(SEP);
				State = 86;
				Match(BRACKET_AB);
				State = 87;
				campo();
				State = 88;
				Match(BRACKET_CE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CampoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(sqlParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(sqlParser.TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(sqlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(sqlParser.DOT, i);
		}
		public CampoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_campo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCampo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CampoContext campo() {
		CampoContext _localctx = new CampoContext(Context, State);
		EnterRule(_localctx, 12, RULE_campo);
		int _la;
		try {
			State = 99;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TEXT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 92;
				Match(TEXT);
				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 95;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 93;
					Match(DOT);
					State = 94;
					Match(TEXT);
					}
					}
					State = 97;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DOT );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Columna_pContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(sqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(sqlParser.TEXT, 0); }
		public Columna_pContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columna_p; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsqlVisitor<TResult> typedVisitor = visitor as IsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumna_p(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Columna_pContext columna_p() {
		Columna_pContext _localctx = new Columna_pContext(Context, State);
		EnterRule(_localctx, 14, RULE_columna_p);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 101;
			Match(DOT);
			State = 102;
			Match(TEXT);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x15', 'k', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\x1A', 
		'\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '$', '\n', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', ',', '\n', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x33', 
		'\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', ':', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x41', '\n', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x5', '\x6', 'H', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', 'O', '\n', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'V', '\n', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', ']', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x6', '\b', 
		'\x62', '\n', '\b', '\r', '\b', '\xE', '\b', '\x63', '\x5', '\b', '\x66', 
		'\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x2', 
		'\x2', '\n', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x2', 
		'\x2', '\x2', 'q', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', '\x4', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\b', '-', '\x3', '\x2', '\x2', '\x2', '\n', ';', '\x3', '\x2', '\x2', 
		'\x2', '\f', 'I', '\x3', '\x2', '\x2', '\x2', '\xE', '\x65', '\x3', '\x2', 
		'\x2', '\x2', '\x10', 'g', '\x3', '\x2', '\x2', '\x2', '\x12', '\x1A', 
		'\x5', '\x4', '\x3', '\x2', '\x13', '\x14', '\x5', '\x4', '\x3', '\x2', 
		'\x14', '\x15', '\x5', '\x4', '\x3', '\x2', '\x15', '\x1A', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x1A', '\x5', '\x6', '\x4', '\x2', '\x17', '\x1A', 
		'\x5', '\b', '\x5', '\x2', '\x18', '\x1A', '\x5', '\n', '\x6', '\x2', 
		'\x19', '\x12', '\x3', '\x2', '\x2', '\x2', '\x19', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x19', '\x16', '\x3', '\x2', '\x2', '\x2', '\x19', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x19', '\x18', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1C', '\x5', '\f', 
		'\a', '\x2', '\x1C', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1D', '#', '\x5', 
		'\x10', '\t', '\x2', '\x1E', '\x1F', '\a', '\b', '\x2', '\x2', '\x1F', 
		' ', '\a', '\x3', '\x2', '\x2', ' ', '!', '\x5', '\f', '\a', '\x2', '!', 
		'\"', '\a', '\x4', '\x2', '\x2', '\"', '$', '\x3', '\x2', '\x2', '\x2', 
		'#', '\x1E', '\x3', '\x2', '\x2', '\x2', '#', '$', '\x3', '\x2', '\x2', 
		'\x2', '$', '%', '\x3', '\x2', '\x2', '\x2', '%', '+', '\a', '\x12', '\x2', 
		'\x2', '&', '\'', '\a', '\b', '\x2', '\x2', '\'', '(', '\a', '\x3', '\x2', 
		'\x2', '(', ')', '\x5', '\f', '\a', '\x2', ')', '*', '\a', '\x4', '\x2', 
		'\x2', '*', ',', '\x3', '\x2', '\x2', '\x2', '+', '&', '\x3', '\x2', '\x2', 
		'\x2', '+', ',', '\x3', '\x2', '\x2', '\x2', ',', '\a', '\x3', '\x2', 
		'\x2', '\x2', '-', '\x32', '\x5', '\xE', '\b', '\x2', '.', '/', '\a', 
		'\x3', '\x2', '\x2', '/', '\x30', '\x5', '\xE', '\b', '\x2', '\x30', '\x31', 
		'\a', '\x4', '\x2', '\x2', '\x31', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '.', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\x33', '\x34', '\x3', '\x2', '\x2', '\x2', '\x34', '\x39', 
		'\a', '\x10', '\x2', '\x2', '\x35', '\x36', '\a', '\x3', '\x2', '\x2', 
		'\x36', '\x37', '\x5', '\xE', '\b', '\x2', '\x37', '\x38', '\a', '\x4', 
		'\x2', '\x2', '\x38', ':', '\x3', '\x2', '\x2', '\x2', '\x39', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', 
		'\t', '\x3', '\x2', '\x2', '\x2', ';', '@', '\x5', '\xE', '\b', '\x2', 
		'<', '=', '\a', '\x3', '\x2', '\x2', '=', '>', '\x5', '\xE', '\b', '\x2', 
		'>', '?', '\a', '\x4', '\x2', '\x2', '?', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '@', '<', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '\x42', '\x3', '\x2', '\x2', '\x2', '\x42', 'G', 
		'\a', '\x11', '\x2', '\x2', '\x43', '\x44', '\a', '\x3', '\x2', '\x2', 
		'\x44', '\x45', '\x5', '\xE', '\b', '\x2', '\x45', '\x46', '\a', '\x4', 
		'\x2', '\x2', '\x46', 'H', '\x3', '\x2', '\x2', '\x2', 'G', '\x43', '\x3', 
		'\x2', '\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', '\x2', 'H', '\v', 
		'\x3', '\x2', '\x2', '\x2', 'I', 'N', '\a', '\r', '\x2', '\x2', 'J', 'K', 
		'\a', '\x6', '\x2', '\x2', 'K', 'L', '\x5', '\xE', '\b', '\x2', 'L', 'M', 
		'\a', '\a', '\x2', '\x2', 'M', 'O', '\x3', '\x2', '\x2', '\x2', 'N', 'J', 
		'\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', '\x2', '\x2', '\x2', 'O', 
		'U', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\a', '\b', '\x2', '\x2', 'Q', 
		'R', '\a', '\x6', '\x2', '\x2', 'R', 'S', '\x5', '\xE', '\b', '\x2', 'S', 
		'T', '\a', '\a', '\x2', '\x2', 'T', 'V', '\x3', '\x2', '\x2', '\x2', 'U', 
		'P', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x3', '\x2', '\x2', '\x2', 
		'V', '\\', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\a', '\b', '\x2', '\x2', 
		'X', 'Y', '\a', '\x6', '\x2', '\x2', 'Y', 'Z', '\x5', '\xE', '\b', '\x2', 
		'Z', '[', '\a', '\a', '\x2', '\x2', '[', ']', '\x3', '\x2', '\x2', '\x2', 
		'\\', 'W', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\x3', '\x2', '\x2', 
		'\x2', ']', '\r', '\x3', '\x2', '\x2', '\x2', '^', '\x66', '\a', '\r', 
		'\x2', '\x2', '_', '`', '\a', '\f', '\x2', '\x2', '`', '\x62', '\a', '\r', 
		'\x2', '\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', 
		'\x63', '\x64', '\x3', '\x2', '\x2', '\x2', '\x64', '\x66', '\x3', '\x2', 
		'\x2', '\x2', '\x65', '^', '\x3', '\x2', '\x2', '\x2', '\x65', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '\x66', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'g', 'h', '\a', '\f', '\x2', '\x2', 'h', 'i', '\a', '\r', '\x2', '\x2', 
		'i', '\x11', '\x3', '\x2', '\x2', '\x2', '\xE', '\x19', '#', '+', '\x32', 
		'\x39', '@', 'G', 'N', 'U', '\\', '\x63', '\x65',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
